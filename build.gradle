// Apply the Kotlin plugin to add support for Kotlin
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.20'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20'
}
apply plugin: 'application'
//apply plugin: 'java'

group 'org.giffardtechnologies'
version '1.1-SNAPSHOT'

sourceCompatibility = 17

def homePath = System.properties['user.home']

def installDir
def locPropertiesFile = project.rootProject.file('local.properties')
if (locPropertiesFile.exists()) {
    Properties locProperties = new Properties()
    locProperties.load(locPropertiesFile.newDataInputStream())
    installDir = locProperties.getProperty('installDir')
}

repositories {
    mavenCentral()
    ivy {
        // change to point to your repo, e.g. http://my.org/repo
        url = "${homePath}/.ivy/repo"
    }
    ivy {
        credentials {
            username "$allegoArtifactoryUser"
            password "$allegoArtifactoryPassword"
        }
        url "https://dev-build.allego.com/artifactory/$allegoAndroidArtifactoryRepo/"
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.1'

    implementation fileTree(includes: ['*.jar'], dir: 'manual-libs')

    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.2'

    // https://mvnrepository.com/artifact/org.apache.velocity/velocity-engine-core
    implementation 'org.apache.velocity:velocity-engine-core:2.3'
    // https://mvnrepository.com/artifact/org.apache.velocity.tools/velocity-tools-generic
    implementation 'org.apache.velocity.tools:velocity-tools-generic:3.1'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    // https://github.com/remkop/picocli
    // https://mvnrepository.com/artifact/info.picocli/picocli
    implementation 'info.picocli:picocli:4.7.5'

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.jetbrains:annotations:23.0.0'

    implementation 'commons-io:commons-io:2.11.0'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    implementation 'org.apache.commons:commons-text:1.11.0'

    implementation('com.google.guava:guava:31.1-jre')

    implementation 'io.vavr:vavr:0.10.3'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.3'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-kotlin
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.15.3'

    implementation 'com.squareup:javapoet:1.13.0'
    implementation 'com.google.googlejavaformat:google-java-format:1.15.0'
    // https://mvnrepository.com/artifact/org.eclipse.jdt/org.eclipse.jdt.core
    implementation group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.core', version: '3.29.0'
    // temporarily force this for missing dependency at 3.10
    implementation('org.eclipse.platform:org.eclipse.equinox.preferences:3.10.1'){
        force = true
    }
    implementation "com.allego.common:futureproofenum:1.0-SNAPSHOT"

    def mapstruct_version = "1.5.3.Final"
    implementation "org.mapstruct:mapstruct:$mapstruct_version"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstruct_version"
}

mainClassName = 'com.giffardtechnologies.restdocs.DocGenerator'

startScripts {
    applicationName = 'doc_generator'
    def gen = unixStartScriptGenerator
    gen.template = resources.text.fromString(
            gen.template.asString().replaceFirst('(?=\nDEFAULT_JVM_OPTS=.*?\n)') {
                '\nJAVA_OPTS="\\$JAVA_OPTS "\'"-Dprogdir=\\$APP_HOME" "-Dexecdir=\\$SAVED"\''
            })
    def genWin = windowsStartScriptGenerator
    genWin.template = resources.text.fromString(
            genWin.template.asString().replaceFirst('(?=\nset DEFAULT_JVM_OPTS=.*?\n)') {
                '\nJAVA_OPTS="%JAVA_OPTS "\'"-Dprogdir=%APP_HOME" "-Dexecdir=%DIRNAME"\''
            })
}

tasks.register('createJavaStartScript', Copy) {
    from file("$buildDir/scripts/doc_generator")
    rename { String filename -> return 'java_generator' }
    filter { String line -> line.replaceAll("(.*)DocGenerator(.*)", '$1JavaGenerator$2') }
    into file("$buildDir/scripts")
}
startScripts.finalizedBy createJavaStartScript

tasks.register('createValidatorStartScript', Copy) {
    from file("$buildDir/scripts/doc_generator")
    rename { String filename -> return 'doc_validator' }
    filter { String line -> line.replaceAll("(.*)DocGenerator(.*)", '$1DocValidatorCommand$2') }
    into file("$buildDir/scripts")
}
startScripts.finalizedBy createValidatorStartScript

installDist {
    into installDir
}

tasks.register('getDeps', Copy) {
    from sourceSets.main.runtimeClasspath
    into 'runtime-libs/'
}